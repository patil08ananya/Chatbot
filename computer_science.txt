
Main menu

WikipediaThe Free Encyclopedia
Search Wikipedia
Search
Create account
Log in

Personal tools
Contents hide
(Top)
History
Etymology and scope
Philosophy
Toggle Philosophy subsection
Fields
Toggle Fields subsection
Discoveries
Programming paradigms
Research
See also
Notes
References
Further reading
External links
Computer science

Article
Talk
Read
View source
View history

Tools
Appearance hide
Text

Small

Standard

Large
Width

Standard

Wide
Color (beta)

Automatic

Light

Dark
Page semi-protected
From Wikipedia, the free encyclopedia
For other uses, see Computer science (disambiguation).
Fundamental areas of computer science
Expression for Church numerals in lambda calculus
Programming language theory
Plot of a quicksort algorithm
Computational complexity theory
Example of computer animation produced using motion capture
Artificial intelligence
Half-adder circuit
Computer architecture
Computer science

History
Outline
Glossary
Category
vte
Computer science is the study of computation, information, and automation.[1][2][3] Computer science spans theoretical disciplines (such as algorithms, theory of computation, and information theory) to applied disciplines (including the design and implementation of hardware and software).[4][5][6]

Algorithms and data structures are central to computer science.[7] The theory of computation concerns abstract models of computation and general classes of problems that can be solved using them. The fields of cryptography and computer security involve studying the means for secure communication and preventing security vulnerabilities. Computer graphics and computational geometry address the generation of images. Programming language theory considers different ways to describe computational processes, and database theory concerns the management of repositories of data. Human–computer interaction investigates the interfaces through which humans and computers interact, and software engineering focuses on the design and principles behind developing software. Areas such as operating systems, networks and embedded systems investigate the principles and design behind complex systems. Computer architecture describes the construction of computer components and computer-operated equipment. Artificial intelligence and machine learning aim to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, planning and learning found in humans and animals. Within artificial intelligence, computer vision aims to understand and process image and video data, while natural language processing aims to understand and process textual and linguistic data.

The fundamental concern of computer science is determining what can and cannot be automated.[2][8][3][9][10] The Turing Award is generally recognized as the highest distinction in computer science.[11][12]

History
Main article: History of computer science
History of computing

Hardware
Hardware before 1960Hardware 1960s to present
Software
SoftwareSoftware configuration managementUnixFree software and open-source software
Computer science
Artificial intelligenceCompiler constructionEarly computer scienceOperating systemsProgramming languagesProminent pioneersSoftware engineering
Modern concepts
General-purpose CPUsGraphical user interfaceInternetLaptopsPersonal computersVideo gamesWorld Wide WebCloud
By country
BulgariaEastern BlocPolandRomaniaSouth AmericaSoviet UnionYugoslavia
Timeline of computing
before 19501950–19791980–19891990–19992000–20092010–20192020–presentmore timelines ...
Glossary of computer science
 Category
vte

Gottfried Wilhelm Leibniz (1646–1716) developed logic in a binary number system and has been called the "founder of computer science".[13]

Charles Babbage is sometimes referred to as the "father of computing".[14]

Ada Lovelace published the first algorithm intended for processing on a computer.[15]
The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity, aiding in computations such as multiplication and division. Algorithms for performing computations have existed since antiquity, even before the development of sophisticated computing equipment.[16]

Wilhelm Schickard designed and constructed the first working mechanical calculator in 1623.[17] In 1673, Gottfried Leibniz demonstrated a digital mechanical calculator, called the Stepped Reckoner.[18] Leibniz may be considered the first computer scientist and information theorist, because of various reasons, including the fact that he documented the binary number system. In 1820, Thomas de Colmar launched the mechanical calculator industry[note 1] when he invented his simplified arithmometer, the first calculating machine strong enough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his Difference Engine, in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[19] He started developing this machine in 1834, and "in less than two years, he had sketched out many of the salient features of the modern computer".[20] "A crucial step was the adoption of a punched card system derived from the Jacquard loom"[20] making it infinitely programmable.[note 2] In 1843, during the translation of a French article on the Analytical Engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to compute the Bernoulli numbers, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.[21] Around 1885, Herman Hollerith invented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. Following Babbage, although unaware of his earlier work, Percy Ludgate in 1909 published[22] the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineer Leonardo Torres Quevedo published his Essays on Automatics,[23] and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The paper also introduced the idea of floating-point arithmetic.[24][25] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the Electromechanical Arithmometer, a prototype that demonstrated the feasibility of an electromechanical analytical engine,[26] on which commands could be typed and the results printed automatically.[27] In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[28] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[29]

During the 1940s, with the development of new and more powerful computing machines such as the Atanasoff–Berry computer and ENIAC, the term computer came to refer to the machines rather than their human predecessors.[30] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. In 1945, IBM founded the Watson Scientific Computing Laboratory at Columbia University in New York City. The renovated fraternity house on Manhattan's West Side was IBM's first laboratory devoted to pure science. The lab is the forerunner of IBM's Research Division, which today operates research facilities around the world.[31] Ultimately, the close relationship between IBM and Columbia University was instrumental in the emergence of a new scientific discipline, with Columbia offering one of the first academic-credit courses in computer science in 1946.[32] Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[33][34] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science department in the United States was formed at Purdue University in 1962.[35] Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.
See also: History of computing and History of informatics
Etymology and scope
See also: Informatics § Etymology
Although first proposed in 1956,[36] the term "computer science" appears in a 1959 article in Communications of the ACM,[37] in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921.[38] Louis justifies the name by arguing that, like management science, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[37] His efforts, and those of others such as numerical analyst George Forsythe, were rewarded: universities went on to create such departments, starting with Purdue in 1962.[39] Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[40] Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,[41] to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is data science; this is now used for a multi-disciplinary field of data analysis, including statistics and databases.

In the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM—turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[42] Three months later in the same journal, comptologist was suggested, followed next year by hypologist.[43] The term computics has also been suggested.[44] In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. informatique (French), Informatik (German), informatica (Italian, Dutch), informática (Spanish, Portuguese), informatika (Slavic languages and Hungarian) or pliroforiki (πληροφορική, which means informatics) in Greek. Similar words have also been adopted in the UK (as in the School of Informatics, University of Edinburgh).[45] "In the U.S., however, informatics is linked with applied computing, or computing in the context of another domain."[46]

A folkloric quotation, often attributed to—but almost certainly not first formulated by—Edsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 3] The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been exchange of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as cognitive science, linguistics, mathematics, physics, biology, Earth science, statistics, philosophy, and logic.

Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[33] Early computer science was strongly influenced by the work of mathematicians such as Kurt Gödel, Alan Turing, John von Neumann, Rózsa Péter and Alonzo Church and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.[36]

The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined.[47] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[48]

The academic, political, and funding aspects of computer science tend to depend on whether a department is formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research.

Philosophy
Main article: Philosophy of computer science
Epistemology of computer science
Despite the word science in its name, there is debate over whether or not computer science is a discipline of science,[49] mathematics,[50] or engineering.[51] Allen Newell and Herbert A. Simon argued in 1975,
Computer science is an empirical discipline. We would have called it an experimental science, but like astronomy, economics, and geology, some of its unique forms of observation and experience do not fit a narrow stereotype of the experimental method. Nonetheless, they are experiments. Each new machine that is built is an experiment. Actually constructing the machine poses a question to nature; and we listen for the answer by observing the machine in operation and analyzing it by all analytical and measurement means available.[51]

It has since been argued that computer science can be classified as an empirical science since it makes use of empirical testing to evaluate the correctness of programs, but a problem remains in defining the laws and theorems of computer science (if any exist) and defining the nature of experiments in computer science.[51] Proponents of classifying computer science as an engineering discipline argue that the reliability of computational systems is investigated in the same way as bridges in civil engineering and airplanes in aerospace engineering.[51] They also argue that while empirical sciences observe what presently exists, computer science observes what is possible to exist and while scientists discover laws from observation, no proper laws have been found in computer science and it is instead concerned with creating phenomena.[51]

Proponents of classifying computer science as a mathematical discipline argue that computer programs are physical realizations of mathematical entities and programs that can be deductively reasoned through mathematical formal methods.[51] Computer scientists Edsger W. Dijkstra and Tony Hoare regard instructions for computer programs as mathematical sentences and interpret formal semantics for programming languages as mathematical axiomatic systems.[51]

Paradigms of computer science
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics.[52] Peter Denning's working group argued that they are theory, abstraction (modeling), and design.[33] Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the "technocratic paradigm" (which might be found in engineering approaches, most prominently in software engineering), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of natural sciences,[53] identifiable in some branches of artificial intelligence).[54] Computer science focuses on methods involved in design, specification, programming, verification, implementation and testing of human-made computing systems.[55]

Fields
This is a dynamic list and may never be able to satisfy particular standards for completeness. You can help by adding missing items with reliable sources.
Further information: Outline of computer science
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[56][57] CSAB, formerly called Computing Sciences Accreditation Board—which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE CS)[58]—identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[56]

Theoretical computer science
Main article: Theoretical computer science
Theoretical Computer Science is mathematical and abstract in spirit, but it derives its motivation from practical and everyday computation. It aims to understand the nature of computation and, as a consequence of this understanding, provide more efficient methodologies.

Theory of computation
Main article: Theory of computation
According to Peter Denning, the fundamental question underlying computer science is, "What can be automated?"[3] Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.

The famous P = NP? problem, one of the Millennium Prize Problems,[59] is an open problem in the theory of computation.

		
M
=
{
X
:
X
∉
X
}
{\displaystyle M=\{X:X\not \in X\}}	
Automata theory	Formal languages	Computability theory	Computational complexity theory
			
Models of computation	Quantum computing theory	Logic circuit theory	Cellular automata
Information and coding theory
Main articles: Information theory and Coding theory
Information theory, closely related to probability and statistics, is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data.[60] Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient and reliable data transmission methods. [61]

				
Coding theory	Channel capacity	Algorithmic information theory	Signal detection theory	Kolmogorov complexity
Data structures and algorithms
Main articles: Data structure and Algorithm
Data structures and algorithms are the studies of commonly used computational methods and their computational efficiency.

O(n2)					
Analysis of algorithms	Algorithm design	Data structures	Combinatorial optimization	Computational geometry	Randomized algorithms
Programming language theory and formal methods
Main articles: Programming language theory and Formal methods
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering, and linguistics. It is an active research area, with numerous dedicated academic journals.

Formal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems.[62] The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.

	
Γ
⊢
x
:
Int
{\displaystyle \Gamma \vdash x:{\text{Int}}}				
Formal semantics	Type theory	Compiler design	Programming languages	Formal verification	Automated theorem proving
Applied computer science
Computer graphics and visualization
Main article: Computer graphics (computer science)
Computer graphics is the study of digital visual contents and involves the synthesis and manipulation of image data. The study is connected to many other fields in computer science, including computer vision, image processing, and computational geometry, and is heavily applied in the fields of special effects and video games.

					
2D computer graphics	Computer animation	Rendering	Mixed reality	Virtual reality	Solid modeling
Image and sound processing
Main article: Data processing
Information can take the form of images, sound, video or other multimedia. Bits of information can be streamed via signals. Its processing is the central notion of informatics, the European view on computing, which studies information processing algorithms independently of the type of information carrier – whether it is electrical, mechanical or biological. This field plays important role in information theory, telecommunications, information engineering and has applications in medical image computing and speech synthesis, among others. What is the lower bound on the complexity of fast Fourier transform algorithms? is one of the unsolved problems in theoretical computer science.

					
FFT algorithms	Image processing	Speech recognition	Data compression	Medical image computing	Speech synthesis
Computational science, finance and engineering
Main articles: Computational science, Computational finance, and Computational engineering
See also: List of computer-aided engineering software
Scientific computing (or computational science) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. A major usage of scientific computing is simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE,[63] as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[64]

								
Numerical analysis	Computational physics	Computational chemistry	Bioinformatics	Neuroinformatics	Psychoinformatics	Medical informatics	Computational engineering	Computational musicology
Social computing and human–computer interaction
Main articles: Social computing and Human–computer interaction
Social computing is an area that is concerned with the intersection of social behavior and computational systems. Human–computer interaction research develops theories, principles, and guidelines for user interface designers.

Software engineering
Main article: Software engineering
See also: Computer programming
Software engineering is the study of designing, implementing, and modifying the software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it does not just deal with the creation or manufacture of new software, but its internal arrangement and maintenance. For example software testing, systems engineering, technical debt and software development processes.

Artificial intelligence
Main articles: Artificial intelligence and Bio-inspired computing
Artificial intelligence (AI) aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development, which require computational understanding. The starting point in the late 1940s was Alan Turing's question "Can computers think?", and the question remains effectively unanswered, although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.

			
Computational learning theory	Computer vision	Neural networks	Planning and scheduling
			
Natural language processing	Computational game theory	Evolutionary computation	Autonomic computing
			
Representation and reasoning	Pattern recognition	Robotics	Swarm intelligence
Computer systems
Computer architecture and organization
Main articles: Computer architecture, Computer organization, and Computer engineering
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.[65] Computer engineers study computational logic and design of computer hardware, from individual processor components, microcontrollers, personal computers to supercomputers and embedded systems. The term "architecture" in computer literature can be traced to the work of Lyle R. Johnson and Frederick P. Brooks Jr., members of the Machine Organization department in IBM's main research center in 1959.

			
Processing unit	Microarchitecture	Multiprocessing	Processor design
			
Ubiquitous computing	Systems architecture	Operating systems	Input/output
			
Embedded system	Real-time computing	Dependability	Interpreter
Concurrent, parallel and distributed computing
Main articles: Concurrency (computer science) and Distributed computing
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other.[66] A number of mathematical models have been developed for general concurrent computation including Petri nets, process calculi and the Parallel Random Access Machine model.[67] When multiple computers are connected in a network while using concurrency, this is known as a distributed system. Computers within that distributed system have their own private memory, and information can be exchanged to achieve common goals.[68]

Computer networks
Main article: Computer network
This branch of computer science aims to manage networks between computers worldwide.

Computer security and cryptography
Main articles: Computer security and Cryptography
Computer security is a branch of computer technology with the objective of protecting information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users.

Historical cryptography is the art of writing and deciphering secret messages. Modern cryptography is the scientific study of problems relating to distributed computations that can be attacked.[69] Technologies studied in modern cryptography include symmetric and asymmetric encryption, digital signatures, cryptographic hash functions, key-agreement protocols, blockchain, zero-knowledge proofs, and garbled circuits.

Databases and data mining
Main articles: Database and Data mining
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database models and query languages. Data mining is a process of discovering patterns in large data sets.

Discoveries
The philosopher of computing Bill Rapaport noted three Great Insights of Computer Science:[70]

Gottfried Wilhelm Leibniz's, George Boole's, Alan Turing's, Claude Shannon's, and Samuel Morse's insight: there are only two objects that a computer has to deal with in order to represent "anything".[note 4]
All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as "on/off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).
See also: Digital physics
Alan Turing's insight: there are only five actions that a computer has to perform in order to do "anything".
Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:[71]
move left one location;
move right one location;
read symbol at current location;
print 0 at current location;
print 1 at current location.
See also: Turing machine
Corrado Böhm and Giuseppe Jacopini's insight: there are only three ways of combining these actions (into more complex ones) that are needed in order for a computer to do "anything".[72]
Only three rules are needed to combine any set of basic instructions into more complex ones:
sequence: first do this, then do that;
selection: IF such-and-such is the case, THEN do this, ELSE do that;
repetition: WHILE such-and-such is the case, DO this.
The three rules of Boehm's and Jacopini's insight can be further simplified with the use of goto (which means it is more elementary than structured programming).
See also: Structured program theorem
Programming paradigms
Main article: Programming paradigm
Programming languages can be used to accomplish different tasks in different ways. Common programming paradigms include:

Functional programming, a style of building the structure and elements of computer programs that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements.[73]
Imperative programming, a programming paradigm that uses statements that change a program's state.[74] In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates.
Object-oriented programming, a programming paradigm based on the concept of "objects", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated. Thus object-oriented computer programs are made out of objects that interact with one another.[75]
Service-oriented programming, a programming paradigm that uses "services" as the unit of computer work, to design and implement integrated business applications and mission critical software programs
Many languages offer support for multiple paradigms, making the distinction more a matter of style than of technical capabilities.[76]

Research
Further information: List of computer science conferences and Category:Computer science journals
Conferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige of conference papers is greater than that of journal publications.[77][78] One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.[79]

See also
Computer science education
Glossary of computer science
List of computer scientists
List of computer science awards
List of pioneers in computer science
Outline of computer science
Notes
 In 1851
 "The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." Bruce Collier, 1970
 See the entry "Computer science" on Wikiquote for the history of this quotation.
 The word "anything" is written in quotation marks because there are things that computers cannot do. One example is: to answer the question if an arbitrary given computer program will eventually finish or run forever (the Halting problem).
References
 "What is Computer Science?". Department of Computer Science, University of York. Archived from the original on June 11, 2020. Retrieved June 11, 2020.
 What Can Be Automated? Computer Science and Engineering Research Study. Computer Science Series. MIT Press. 1980. ISBN 978-0262010603. Archived from the original on January 9, 2021.
 Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989). "Computing as a discipline". Computer. 22 (2): 63–70. doi:10.1109/2.19833. ISSN 1558-0814. Archived from the original on March 3, 2022. Retrieved March 3, 2022. The discipline of computing is the systematic study of algorithmic processes that describe and transform information, their theory, analysis, design, efficiency, implementation, and application. The fundamental question underlying all of computing is, 'What can be (efficiently) automated?'
 "WordNet Search—3.1". WordNet Search. Wordnetweb.princeton.edu. Archived from the original on October 18, 2017. Retrieved May 14, 2012.
 "Definition of computer science | Dictionary.com". www.dictionary.com. Archived from the original on June 11, 2020. Retrieved June 11, 2020.
 "What is Computer Science? | Undergraduate Computer Science at UMD". undergrad.cs.umd.edu. Archived from the original on November 27, 2020. Retrieved July 15, 2022.
 Harel, David (2014). Algorithmics The Spirit of Computing. Springer Berlin. ISBN 978-3-642-44135-6. OCLC 876384882. Archived from the original on June 17, 2020. Retrieved June 17, 2020.
 Patton, Richard D.; Patton, Peter C. (2009), Nof, Shimon Y. (ed.), "What Can be Automated? What Cannot be Automated?", Springer Handbook of Automation, Springer Handbooks, Berlin, Heidelberg: Springer, pp. 305–313, doi:10.1007/978-3-540-78831-7_18, ISBN 978-3-540-78831-7, archived from the original on January 11, 2023, retrieved March 3, 2022
 Forsythe, George (August 5–10, 1969). "Computer Science and Education". Proceedings of IFIP Congress 1968. The question 'What can be automated?' is one of the most inspiring philosophical and practical questions of contemporary civilization.
 Knuth, Donald E. (August 1, 1972). "George Forsythe and the development of computer science". Communications of the ACM. 15 (8): 721–726. doi:10.1145/361532.361538. ISSN 0001-0782. S2CID 12512057.
 Hanson, Vicki L. (January 23, 2017). "Celebrating 50 years of the Turing award". Communications of the ACM. 60 (2): 5. doi:10.1145/3033604. ISSN 0001-0782. S2CID 29984960.
 Scott, Eric; Martins, Marcella Scoczynski Ribeiro; Yafrani, Mohamed El; Volz, Vanessa; Wilson, Dennis G (June 5, 2018). "ACM marks 50 years of the ACM A.M. turing award and computing's greatest achievements". ACM SIGEVOlution. 10 (3): 9–11. doi:10.1145/3231560.3231563. ISSN 1931-8499. S2CID 47021559.
 "2021: 375th birthday of Leibniz, father of computer science". people.idsia.ch. Archived from the original on September 21, 2022. Retrieved February 4, 2023.
 "Charles Babbage Institute: Who Was Charles Babbage?". cbi.umn.edu. Archived from the original on January 9, 2007. Retrieved December 28, 2016.
 "Ada Lovelace | Babbage Engine | Computer History Museum". www.computerhistory.org. Archived from the original on December 25, 2018. Retrieved December 28, 2016.
 "History of Computer Science". cs.uwaterloo.ca. Archived from the original on July 29, 2017. Retrieved July 15, 2022.
 "Wilhelm Schickard – Ein Computerpionier" (PDF) (in German). Archived from the original (PDF) on September 19, 2020. Retrieved December 4, 2016.
 Keates, Fiona (June 25, 2012). "A Brief History of Computing". The Repository. The Royal Society. Archived from the original on June 29, 2012. Retrieved January 19, 2014.
 "Science Museum, Babbage's Analytical Engine, 1834–1871 (Trial model)". Archived from the original on August 30, 2019. Retrieved May 11, 2020.
 Hyman, Anthony (1982). Charles Babbage: Pioneer of the Computer. Oxford University Press. ISBN 978-0691083032.
 "A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". Archived from the original on February 10, 2006. Retrieved May 4, 2006.
 "The John Gabriel Byrne Computer Science Collection" (PDF). Archived from the original on April 16, 2019. Retrieved August 8, 2019.
 Torres Quevedo, L. (1914). "Ensayos sobre Automática – Su definicion. Extension teórica de sus aplicaciones". Revista de la Academia de Ciencias Exacta, 12, pp. 391–418.
 Torres Quevedo, Leonardo. Automática: Complemento de la Teoría de las Máquinas, (pdf), pp. 575-583, Revista de Obras Públicas, 19 November 1914.
 Ronald T. Kneusel. Numbers and Computers, Springer, pp. 84-85, 2017. ISBN 978-3319505084
 Randell, Brian. Digital Computers, History of Origins, (pdf), p. 545, Digital Computers: Origins, Encyclopedia of Computer Science, January 2003.
 Randell 1982, p. 6, 11–13.
 "In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", Bernard Cohen, p.44 (2000)
 Brian Randell, p. 187, 1975
 The Association for Computing Machinery (ACM) was founded in 1947.
 "IBM Archives: 1945". Ibm.com. January 23, 2003. Archived from the original on January 5, 2019. Retrieved March 19, 2019.
 "IBM100 – The Origins of Computer Science". Ibm.com. September 15, 1995. Archived from the original on January 5, 2019. Retrieved March 19, 2019.
 Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989). "Computing as a discipline". Computer. 22 (2): 63–70. doi:10.1109/2.19833. ISSN 1558-0814. Archived from the original on March 3, 2022. Retrieved March 3, 2022.
 "Some EDSAC statistics". University of Cambridge. Archived from the original on September 3, 2007. Retrieved November 19, 2011.
 "Computer science pioneer Samuel D. Conte dies at 85". Purdue Computer Science. July 1, 2002. Archived from the original on October 6, 2014. Retrieved December 12, 2014.
 Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Taylor and Francis / CRC Press.
 Louis Fine (1960). "The Role of the University in Computers, Data Processing, and Related Fields". Communications of the ACM. 2 (9): 7–14. doi:10.1145/368424.368427. S2CID 6740821.
 "Stanford University Oral History". Stanford University. Archived from the original on April 4, 2017. Retrieved May 30, 2013.
 Donald Knuth (1972). "George Forsythe and the Development of Computer Science". Comms. ACM. Archived October 20, 2013, at the Wayback Machine
 Matti Tedre (2006). "The Development of Computer Science: A Sociocultural Perspective" (PDF). p. 260. Archived (PDF) from the original on October 9, 2022. Retrieved December 12, 2014.
 Peter Naur (1966). "The science of datalogy". Communications of the ACM. 9 (7): 485. doi:10.1145/365719.366510. S2CID 47558402.
 Weiss, E.A.; Corley, Henry P.T. "Letters to the editor". Communications of the ACM. 1 (4): 6. doi:10.1145/368796.368802. S2CID 5379449.
 Communications of the ACM 2(1):p.4
 IEEE Computer 28(12): p.136
 P. Mounier-Kuhn, L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science, Paris, PUPS, 2010, ch. 3 & 4.
 Groth, Dennis P. (February 2010). "Why an Informatics Degree?". Communications of the ACM. Cacm.acm.org. Archived from the original on January 11, 2023. Retrieved June 14, 2016.
 Tedre, M. (2011). "Computing as a Science: A Survey of Competing Viewpoints". Minds and Machines. 21 (3): 361–387. doi:10.1007/s11023-011-9240-4. S2CID 14263916.
 Parnas, D.L. (1998). "Software engineering programmes are not computer science programmes". Annals of Software Engineering. 6: 19–37. doi:10.1023/A:1018949113292. S2CID 35786237., p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]"
 Luk, R.W.P. (2020). "Insight in how computer science can be a science". Science & Philosophy. 8 (2): 17–47. doi:10.23756/sp.v8i2.531.
 Knuth, D.E. (1974). "Computer science and its relation to mathematics". The American Mathematical Monthly. 81 (4): 323–343. doi:10.2307/2318994. JSTOR 2318994.
 "The Philosophy of Computer Science". The Philosophy of Computer Science (Stanford Encyclopedia of Philosophy). Metaphysics Research Lab, Stanford University. 2021. Archived from the original on September 16, 2021. Retrieved September 16, 2021.
 Wegner, P. (October 13–15, 1976). Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.
 Denning, Peter J. (2007). "Computing is a natural science". Communications of the ACM. 50 (7): 13–18. doi:10.1145/1272516.1272529. S2CID 20045303.
 Eden, A.H. (2007). "Three Paradigms of Computer Science" (PDF). Minds and Machines. 17 (2): 135–167. CiteSeerX 10.1.1.304.7763. doi:10.1007/s11023-007-9060-8. S2CID 3023076. Archived from the original (PDF) on February 15, 2016.
 Turner, Raymond; Angius, Nicola (2019). "The Philosophy of Computer Science". In Zalta, Edward N. (ed.). The Stanford Encyclopedia of Philosophy. Archived from the original on October 14, 2019. Retrieved October 14, 2019.
 "Computer Science as a Profession". Computing Sciences Accreditation Board. May 28, 1997. Archived from the original on June 17, 2008. Retrieved May 23, 2010.
 Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004). Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press. ISBN 978-0-309-09301-9. Archived from the original on February 18, 2011. Retrieved August 31, 2008.
 "CSAB Leading Computer Education". CSAB. August 3, 2011. Archived from the original on January 20, 2019. Retrieved November 19, 2011.
 Clay Mathematics Institute P = NP Archived October 14, 2013, at the Wayback Machine
 P. Collins, Graham (October 14, 2002). "Claude E. Shannon: Founder of Information Theory". Scientific American. Archived from the original on January 16, 2014. Retrieved December 12, 2014.
 Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta; 2012. Uncertainty Analysis in Econometrics with Applications. Springer Science & Business Media. p. 63. ISBN 978-3-642-35443-4.
 Phillip A. Laplante, (2010). Encyclopedia of Software Engineering Three-Volume Set (Print). CRC Press. p. 309. ISBN 978-1-351-24926-3.
 Muhammad H. Rashid, (2016). SPICE for Power Electronics and Electric Power. CRC Press. p. 6. ISBN 978-1-4398-6047-2.
 "What is an integrated circuit (IC)? A vital component of modern electronics". WhatIs.com. Archived from the original on November 15, 2021. Retrieved November 15, 2021.
 A. Thisted, Ronald (April 7, 1997). "Computer Architecture" (PDF). The University of Chicago. Archived (PDF) from the original on October 9, 2022.
 Jiacun Wang, (2017). Real-Time Embedded Systems. Wiley. p. 12. ISBN 978-1-119-42070-5.
 Gordana Dodig-Crnkovic; Raffaela Giovagnoli, (2013). Computing Nature: Turing Centenary Perspective. Springer Science & Business Media. p. 247. ISBN 978-3-642-37225-4.
 Simon Elias Bibri (2018). Smart Sustainable Cities of the Future: The Untapped Potential of Big Data Analytics and Context-Aware Computing for Advancing Sustainability. Springer. p. 74. ISBN 978-3-319-73981-6.
 Katz, Jonathan (2008). Introduction to modern cryptography. Yehuda Lindell. Boca Raton: Chapman & Hall/CRC. ISBN 978-1-58488-551-1. OCLC 137325053. Archived from the original on May 6, 2022. Retrieved November 17, 2021.
 Rapaport, William J. (September 20, 2013). "What Is Computation?". State University of New York at Buffalo. Archived from the original on February 14, 2001. Retrieved August 31, 2013.
 B. Jack Copeland, (2012). Alan Turing's Electronic Brain: The Struggle to Build the ACE, the World's Fastest Computer. OUP Oxford. p. 107. ISBN 978-0-19-960915-4.
 Charles W. Herbert, (2010). An Introduction to Programming Using Alice 2.2. Cengage Learning. p. 122. ISBN 0-538-47866-7.
 Md. Rezaul Karim; Sridhar Alla, (2017). Scala and Spark for Big Data Analytics: Explore the concepts of functional programming, data streaming, and machine learning. Packt Publishing Ltd. p. 87. ISBN 978-1-78355-050-0.
 Lex Sheehan, (2017). Learning Functional Programming in Go: Change the way you approach your applications using functional programming in Go. Packt Publishing Ltd. p. 16. ISBN 978-1-78728-604-7.
 Evelio Padilla, (2015). Substation Automation Systems: Design and Implementation. Wiley. p. 245. ISBN 978-1-118-98730-8.
 "Multi-Paradigm Programming Language". MDN Web Docs. Mozilla Foundation. Archived from the original on August 21, 2013.
 Meyer, Bertrand (April 2009). "Viewpoint: Research evaluation for computer science". Communications of the ACM. 25 (4): 31–34. doi:10.1145/1498765.1498780. S2CID 8625066.
 Patterson, David (August 1999). "Evaluating Computer Scientists and Engineers For Promotion and Tenure". Computing Research Association. Archived from the original on July 22, 2015. Retrieved July 19, 2015.
 Fortnow, Lance (August 2009). "Viewpoint: Time for Computer Science to Grow Up". Communications of the ACM. 52 (8): 33–35. doi:10.1145/1536616.1536631.
Further reading
Tucker, Allen B. (2004). Computer Science Handbook (2nd ed.). Chapman and Hall/CRC. ISBN 978-1-58488-360-9.
Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (4th ed.). Grove's Dictionaries. ISBN 978-1-56159-248-7. Archived from the original on June 8, 2020. Retrieved February 6, 2011.
Edwin D. Reilly (2003). Milestones in Computer Science and Information Technology. Greenwood Publishing Group. ISBN 978-1-57356-521-9.
Knuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.
Collier, Bruce (1990). The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc. ISBN 978-0-8240-0043-1. Archived from the original on January 20, 2007. Retrieved May 4, 2013.
Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. The MIT press. ISBN 978-0-262-53179-5.
Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. CRC Press, Taylor & Francis.
Randell, Brian (1973). The origins of Digital computers, Selected Papers. Springer-Verlag. ISBN 978-3-540-06169-4.
Randell, Brian (October–December 1982). "From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush" (PDF). IEEE Annals of the History of Computing. 4 (4): 327–341. doi:10.1109/mahc.1982.10042. S2CID 1737953. Archived from the original (PDF) on September 21, 2013.
Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005.
Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004.
External links

Wikibooks has a book on the topic of: Informatics Practices for Class XI (CBSE)
Computer science
at Wikipedia's sister projects
Definitions from Wiktionary
Media from Commons
Quotations from Wikiquote
Textbooks from Wikibooks
Resources from Wikiversity
Library resources about
Computer science
Resources in your library
Resources in other libraries
DBLP Computer Science Bibliography
Association for Computing Machinery
Institute of Electrical and Electronics Engineers
vte
Computer science
vte
Glossaries of science and engineering
vte
Software engineering
Authority control databases Edit this at Wikidata
Categories: Computer scienceFormal sciences
This page was last edited on 3 August 2024, at 14:46 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile viewWikimedia FoundationPowered by MediaWiki

Main menu

WikipediaThe Free Encyclopedia
Search Wikipedia
Search
Create account
Log in

Personal tools
Contents hide
(Top)
Prehistory
Binary logic
Toggle Binary logic subsection
Gottfried Wilhelm Leibniz
Emergence of a discipline
Toggle Emergence of a discipline subsection
Charles Babbage and Ada Lovelace
Early post-Analytical Engine designs
Charles Sanders Peirce and electrical switching circuits
Alan Turing and the Turing machine
Kathleen Booth and the first assembly language
Early computer hardware
Shannon and information theory
Wiener and cybernetics
John von Neumann and the von Neumann architecture
John McCarthy, Marvin Minsky and artificial intelligence
See also
References
Toggle References subsection
Sources
Further reading
External links
History of computer science

Article
Talk
Read
Edit
View history

Tools
Appearance hide
Text

Small

Standard

Large
Width

Standard

Wide
Color (beta)

Automatic

Light

Dark
From Wikipedia, the free encyclopedia
History of computing

Hardware
Hardware before 1960Hardware 1960s to present
Software
SoftwareSoftware configuration managementUnixFree software and open-source software
Computer science
Artificial intelligenceCompiler constructionEarly computer scienceOperating systemsProgramming languagesProminent pioneersSoftware engineering
Modern concepts
General-purpose CPUsGraphical user interfaceInternetLaptopsPersonal computersVideo gamesWorld Wide WebCloud
By country
BulgariaEastern BlocPolandRomaniaSouth AmericaSoviet UnionYugoslavia
Timeline of computing
before 19501950–19791980–19891990–19992000–20092010–20192020–presentmore timelines ...
Glossary of computer science
 Category
vte
The history of computer science began long before the modern discipline of computer science, usually appearing in forms like mathematics or physics. Developments in previous centuries alluded to the discipline that we now know as computer science.[1] This progression, from mechanical inventions and mathematical theories towards modern computer concepts and machines, led to the development of a major academic field, massive technological advancement across the Western world, and the basis of a massive worldwide trade and culture.[2]

Prehistory

John Napier (1550–1617), the inventor of logarithms
The earliest known tool for use in computation was the abacus, developed in the period between 2700 and 2300 BCE in Sumer.[3] The Sumerians' abacus consisted of a table of successive columns which delimited the successive orders of magnitude of their sexagesimal number system.[4]: 11  Its original style of usage was by lines drawn in sand with pebbles. Abaci of a more modern design are still used as calculation tools today, such as the Chinese abacus.[5]

In the 5th century BC in ancient India, the grammarian Pāṇini formulated the grammar of Sanskrit in 3959 rules known as the Ashtadhyayi which was highly systematized and technical. Panini used metarules, transformations and recursions.[6]

The Antikythera mechanism is believed to be an early mechanical analog computer.[7] It was designed to calculate astronomical positions. It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera, between Kythera and Crete, and has been dated to circa 100 BC.[7]

Mechanical analog computer devices appeared again a thousand years later in the medieval Islamic world. They were developed by Muslim astronomers, such as the mechanical geared astrolabe by Abū Rayhān al-Bīrūnī,[8] and the torquetum by Jabir ibn Aflah.[9] According to Simon Singh, Muslim mathematicians also made important advances in cryptography, such as the development of cryptanalysis and frequency analysis by Alkindus.[10][11] Programmable machines were also invented by Muslim engineers, such as the automatic flute player by the Banū Mūsā brothers,[12]

Technological artifacts of similar complexity appeared in 14th century Europe, with mechanical astronomical clocks.[13]

When John Napier discovered logarithms for computational purposes in the early 17th century,[14] there followed a period of considerable progress by inventors and scientists in making calculating tools. In 1623 Wilhelm Schickard designed a calculating machine as a commission for Johannes Kepler which he named the Calculating Clock, but abandoned the project, when the prototype he had started building was destroyed by a fire in 1624.[15] Around 1640, Blaise Pascal, a leading French mathematician, constructed a mechanical adding device based on a design described by Greek mathematician Hero of Alexandria.[16] Then in 1672 Gottfried Wilhelm Leibniz invented the Stepped Reckoner which he completed in 1694.[17]

In 1837 Charles Babbage first described his Analytical Engine which is accepted as the first design for a modern computer. The analytical engine had expandable memory, an arithmetic unit, and logic processing capabilities able to interpret a programming language with loops and conditional branching. Although never built, the design has been studied extensively and is understood to be Turing equivalent. The analytical engine would have had a memory capacity of less than 1 kilobyte of memory and a clock speed of less than 10 Hertz.[18]

Considerable advancement in mathematics and electronics theory was required before the first modern computers could be designed.

Binary logic
Gottfried Wilhelm Leibniz
Main article: Gottfried Wilhelm Leibniz

Gottfried Wilhelm Leibniz (1646–1716) developed logic in a binary number system and has been called the "founder of computer science".[19]
In 1702, Gottfried Wilhelm Leibniz developed logic in a formal, mathematical sense with his writings on the binary numeral system. Leibniz simplified the binary system and articulated logical properties such as conjunction, disjunction, negation, identity, inclusion, and the empty set.[20] He anticipated Lagrangian interpolation and algorithmic information theory. His calculus ratiocinator anticipated aspects of the universal Turing machine. In 1961, Norbert Wiener suggested that Leibniz should be considered the patron saint of cybernetics.[21] Wiener is quoted with "Indeed, the general idea of a computing machine is nothing but a mechanization of Leibniz's Calculus Ratiocinator."[22] But it took more than a century before George Boole published his Boolean algebra in 1854 with a complete system that allowed computational processes to be mathematically modeled.[23]

By this time, the first mechanical devices driven by a binary pattern had been invented. The Industrial Revolution had driven forward the mechanization of many tasks, and this included weaving. Punched cards controlled Joseph Marie Jacquard's loom in 1801, where a hole punched in the card indicated a binary one and an unpunched spot indicated a binary zero. Jacquard's loom was far from being a computer, but it did illustrate that machines could be driven by binary systems and stored binary information.[23]

Emergence of a discipline

Charles Babbage (1791–1871), one of the pioneers of computing
Charles Babbage and Ada Lovelace
Main articles: Charles Babbage and Ada Lovelace
Charles Babbage is often regarded as one of the first pioneers of computing. Beginning in the 1810s, Babbage had a vision of mechanically computing numbers and tables. Putting this into reality, Babbage designed a calculator to compute numbers up to 8 decimal points long. Continuing with the success of this idea, Babbage worked to develop a machine that could compute numbers with up to 20 decimal places. By the 1830s, Babbage had devised a plan to develop a machine that could use punched cards to perform arithmetical operations. The machine would store numbers in memory units, and there would be a form of sequential control. This means that one operation would be carried out before another in such a way that the machine would produce an answer and not fail. This machine was to be known as the "Analytical Engine", which was the first true representation of what is the modern computer.[24]


Ada Lovelace (1815–1852) predicted the use of computers in symbolic manipulation
Ada Lovelace (Augusta Ada Byron) is credited as the pioneer of computer programming and is regarded as a mathematical genius. Lovelace began working with Charles Babbage as an assistant while Babbage was working on his "Analytical Engine", the first mechanical computer. [25] During her work with Babbage, Ada Lovelace became the designer of the first computer algorithm, which could compute Bernoulli numbers,[26] although this is arguable as Charles was the first to design the difference engine and consequently its corresponding difference based algorithms, making him the first computer algorithm designer. Moreover, Lovelace's work with Babbage resulted in her prediction of future computers to not only perform mathematical calculations but also manipulate symbols, mathematical or not.[27] While she was never able to see the results of her work, as the "Analytical Engine" was not created in her lifetime, her efforts in later years, beginning in the 1840s, did not go unnoticed.[28]

Early post-Analytical Engine designs

Leonardo Torres Quevedo (1852–1936) proposed a consistent manner to store floating-point numbers
Following Babbage, although at first unaware of his earlier work, was Percy Ludgate, a clerk to a corn merchant in Dublin, Ireland. He independently designed a programmable mechanical computer, which he described in a work that was published in 1909.[29][30]

Two other inventors, Leonardo Torres Quevedo and Vannevar Bush, also did follow on research based on Babbage's work. In his Essays on Automatics (1914), Torres designed an analytical electromechanical machine that was controlled by a read-only program and introduced the idea of floating-point arithmetic.[31][32][33] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, he presented in Paris the Electromechanical Arithmometer, which consisted of an arithmetic unit connected to a (possibly remote) typewriter, on which commands could be typed and the results printed automatically.[34] Bush's paper Instrumental Analysis (1936) discussed using existing IBM punch card machines to implement Babbage's design. In the same year he started the Rapid Arithmetical Machine project to investigate the problems of constructing an electronic digital computer.[35]

Charles Sanders Peirce and electrical switching circuits

Charles Sanders Peirce (1839–1914) described how logical operations could be carried out by electrical switching circuits
In an 1886 letter, Charles Sanders Peirce described how logical operations could be carried out by electrical switching circuits.[36] During 1880–81 he showed that NOR gates alone (or alternatively NAND gates alone) can be used to reproduce the functions of all the other logic gates, but this work on it was unpublished until 1933.[37] The first published proof was by Henry M. Sheffer in 1913, so the NAND logical operation is sometimes called Sheffer stroke; the logical NOR is sometimes called Peirce's arrow.[38] Consequently, these gates are sometimes called universal logic gates.[39]

Eventually, vacuum tubes replaced relays for logic operations. Lee De Forest's modification, in 1907, of the Fleming valve can be used as a logic gate. Ludwig Wittgenstein introduced a version of the 16-row truth table as proposition 5.101 of Tractatus Logico-Philosophicus (1921). Walther Bothe, inventor of the coincidence circuit, got part of the 1954 Nobel Prize in physics, for the first modern electronic AND gate in 1924. Konrad Zuse designed and built electromechanical logic gates for his computer Z1 (from 1935 to 1938).

Up to and during the 1930s, electrical engineers were able to build electronic circuits to solve mathematical and logic problems, but most did so in an ad hoc manner, lacking any theoretical rigor. This changed with switching circuit theory in the 1930s. From 1934 to 1936, Akira Nakashima, Claude Shannon, and Viktor Shetakov published a series of papers showing that the two-valued Boolean algebra, can describe the operation of switching circuits.[40][41][42][43] This concept, of utilizing the properties of electrical switches to do logic, is the basic concept that underlies all electronic digital computers. Switching circuit theory provided the mathematical foundations and tools for digital system design in almost all areas of modern technology.[43]

While taking an undergraduate philosophy class, Shannon had been exposed to Boole's work, and recognized that it could be used to arrange electromechanical relays (then used in telephone routing switches) to solve logic problems. His thesis became the foundation of practical digital circuit design when it became widely known among the electrical engineering community during and after World War II.[44]

Alan Turing and the Turing machine
Main articles: Alan Turing and Turing machine

Alan Turing, English computer scientist, mathematician, logician, and cryptanalyst. (circa 1930)
Before the 1920s, computers (sometimes computors) were human clerks that performed computations. They were usually under the lead of a physicist. Many thousands of computers were employed in commerce, government, and research establishments. Many of these clerks who served as human computers were women.[45][46][47][48] Some performed astronomical calculations for calendars, others ballistic tables for the military.[49]

After the 1920s, the expression computing machine referred to any machine that performed the work of a human computer, especially those in accordance with effective methods of the Church-Turing thesis. The thesis states that a mathematical method is effective if it could be set out as a list of instructions able to be followed by a human clerk with paper and pencil, for as long as necessary, and without ingenuity or insight.

Machines that computed with continuous values became known as the analog kind. They used machinery that represented continuous numeric quantities, like the angle of a shaft rotation or difference in electrical potential.

Digital machinery, in contrast to analog, were able to render a state of a numeric value and store each individual digit. Digital machinery used difference engines or relays before the invention of faster memory devices.

The phrase computing machine gradually gave way, after the late 1940s, to just computer as the onset of electronic digital machinery became common. These computers were able to perform the calculations that were performed by the previous human clerks.

Since the values stored by digital machines were not bound to physical properties like analog devices, a logical computer, based on digital equipment, was able to do anything that could be described "purely mechanical." The theoretical Turing Machine, created by Alan Turing, is a hypothetical device theorized in order to study the properties of such hardware.

The mathematical foundations of modern computer science began to be laid by Kurt Gödel with his incompleteness theorem (1931). In this theorem, he showed that there were limits to what could be proved and disproved within a formal system. This led to work by Gödel and others to define and describe these formal systems, including concepts such as mu-recursive functions and lambda-definable functions.[50]

In 1936 Alan Turing and Alonzo Church independently, and also together, introduced the formalization of an algorithm, with limits on what can be computed, and a "purely mechanical" model for computing.[51] This became the Church–Turing thesis, a hypothesis about the nature of mechanical calculation devices, such as electronic computers. The thesis states that any calculation that is possible can be performed by an algorithm running on a computer, provided that sufficient time and storage space are available.[51]

In 1936, Alan Turing also published his seminal work on the Turing machines, an abstract digital computing machine which is now simply referred to as the Universal Turing machine. This machine invented the principle of the modern computer and was the birthplace of the stored program concept that almost all modern day computers use.[52] These hypothetical machines were designed to formally determine, mathematically, what can be computed, taking into account limitations on computing ability. If a Turing machine can complete the task, it is considered Turing computable.[53]

The Los Alamos physicist Stanley Frankel, has described John von Neumann's view of the fundamental importance of Turing's 1936 paper, in a letter:[52]

I know that in or about 1943 or ‘44 von Neumann was well aware of the fundamental importance of Turing's paper of 1936… Von Neumann introduced me to that paper and at his urging I studied it with care. Many people have acclaimed von Neumann as the "father of the computer" (in a modern sense of the term) but I am sure that he would never have made that mistake himself. He might well be called the midwife, perhaps, but he firmly emphasized to me, and to others I am sure, that the fundamental conception is owing to Turing...


John V. Atanasoff (1903–1995) created the first electric digital computer, known as the Atanasoff–Berry computer
Kathleen Booth and the first assembly language
Kathleen Booth wrote the first assembly language and designed the assembler and autocode for the Automatic Relay Calculator (ARC) at Birkbeck College, University of London.[54] She helped design three different machines including the ARC, SEC (Simple Electronic Computer), and APE(X)C.

Early computer hardware
The world's first electronic digital computer, the Atanasoff–Berry computer, was built on the Iowa State campus from 1939 through 1942 by John V. Atanasoff, a professor of physics and mathematics, and Clifford Berry, an engineering graduate student.


Konrad Zuse, inventor of the modern computer[55][56]
In 1941, Konrad Zuse developed the world's first functional program-controlled computer, the Z3. In 1998, it was shown to be Turing-complete in principle.[57][58] Zuse also developed the S2 computing machine, considered the first process control computer. He founded one of the earliest computer businesses in 1941, producing the Z4, which became the world's first commercial computer. In 1946, he designed the first high-level programming language, Plankalkül.[59]

In 1948, the Manchester Baby was completed; it was the world's first electronic digital computer that ran programs stored in its memory, like almost all modern computers.[52] The influence on Max Newman of Turing's seminal 1936 paper on the Turing Machines and of his logico-mathematical contributions to the project, were both crucial to the successful development of the Baby.[52]

In 1950, Britain's National Physical Laboratory completed Pilot ACE, a small scale programmable computer, based on Turing's philosophy. With an operating speed of 1 MHz, the Pilot Model ACE was for some time the fastest computer in the world.[52][60] Turing's design for ACE had much in common with today's RISC architectures and it called for a high-speed memory of roughly the same capacity as an early Macintosh computer, which was enormous by the standards of his day.[52] Had Turing's ACE been built as planned and in full, it would have been in a different league from the other early computers.[52]

Later in the 1950s, the first operating system, GM-NAA I/O, supporting batch processing to allow jobs to be run with less operator intervention, was developed by General Motors and North American Aviation for the IBM 701.

In 1969, an experiment was conducted by two research teams at UCLA and Stanford to create a network between 2 computers although the system crashed during the initial attempt to connect to the other computer but was a huge step towards the Internet.


Claude Shannon (1916–2001) created the field of information theory
The first actual computer bug was a moth. It was stuck in between the relays on the Harvard Mark II.[61] While the invention of the term 'bug' is often but erroneously attributed to Grace Hopper, a future rear admiral in the U.S. Navy, who supposedly logged the "bug" on September 9, 1945, most other accounts conflict at least with these details. According to these accounts, the actual date was September 9, 1947 when operators filed this 'incident' — along with the insect and the notation "First actual case of bug being found" (see software bug for details).[61]

Shannon and information theory
Claude Shannon went on to found the field of information theory with his 1948 paper titled A Mathematical Theory of Communication, which applied probability theory to the problem of how to best encode the information a sender wants to transmit. This work is one of the theoretical foundations for many areas of study, including data compression and cryptography.[62]


Norbert Wiener (1894–1964) created the term cybernetics
Wiener and cybernetics
From experiments with anti-aircraft systems that interpreted radar images to detect enemy planes, Norbert Wiener coined the term cybernetics from the Greek word for "steersman." He published "Cybernetics" in 1948, which influenced artificial intelligence. Wiener also compared computation, computing machinery, memory devices, and other cognitive similarities with his analysis of brain waves.[63]


John von Neumann (1903–1957) introduced the computer architecture known as Von Neumann architecture
John von Neumann and the von Neumann architecture
Main articles: John von Neumann and Von Neumann architecture
In 1946, a model for computer architecture was introduced and became known as Von Neumann architecture. Since 1950, the von Neumann model provided uniformity in subsequent computer designs. The von Neumann architecture was considered innovative as it introduced an idea of allowing machine instructions and data to share memory space.[64] The von Neumann model is composed of three major parts, the arithmetic logic unit (ALU), the memory, and the instruction processing unit (IPU). In von Neumann machine design, the IPU passes addresses to memory, and memory, in turn, is routed either back to the IPU if an instruction is being fetched or to the ALU if data is being fetched.[65]

Von Neumann's machine design uses a RISC (Reduced instruction set computing) architecture,[dubious – discuss] which means the instruction set uses a total of 21 instructions to perform all tasks. (This is in contrast to CISC, complex instruction set computing, instruction sets which have more instructions from which to choose.) With von Neumann architecture, main memory along with the accumulator (the register that holds the result of logical operations)[66] are the two memories that are addressed. Operations can be carried out as simple arithmetic (these are performed by the ALU and include addition, subtraction, multiplication and division), conditional branches (these are more commonly seen now as if statements or while loops. The branches serve as go to statements), and logical moves between the different components of the machine, i.e., a move from the accumulator to memory or vice versa. Von Neumann architecture accepts fractions and instructions as data types. Finally, as the von Neumann architecture is a simple one, its register management is also simple. The architecture uses a set of seven registers to manipulate and interpret fetched data and instructions. These registers include the "IR" (instruction register), "IBR" (instruction buffer register), "MQ" (multiplier quotient register), "MAR" (memory address register), and "MDR" (memory data register)."[65] The architecture also uses a program counter ("PC") to keep track of where in the program the machine is.[65]


John McCarthy (1927–2011) is considered one of the founding fathers of artificial intelligence
John McCarthy, Marvin Minsky and artificial intelligence
Main articles: John McCarthy (computer scientist), Marvin Minsky, and Artificial intelligence
The term artificial intelligence was credited by John McCarthy to explain the research that they were doing for a proposal for the Dartmouth Summer Research. The naming of artificial intelligence also led to the birth of a new field in computer science.[67] On August 31, 1955, a research project was proposed consisting of John McCarthy, Marvin L. Minsky, Nathaniel Rochester, and Claude E. Shannon. The official project began in 1956 that consisted of several significant parts they felt would help them better understand artificial intelligence's makeup.

McCarthy and his colleagues' ideas behind automatic computers was while a machine is capable of completing a task, then the same should be confirmed with a computer by compiling a program to perform the desired results. They also discovered that the human brain was too complex to replicate, not by the machine itself but by the program. The knowledge to produce a program that sophisticated was not there yet.

The concept behind this was looking at how humans understand our own language and structure of how we form sentences, giving different meaning and rule sets and comparing them to a machine process. The way computers can understand is at a hardware level. This language is written in binary (1s and 0's). This has to be written in a specific format that gives the computer the ruleset to run a particular hardware piece.[68]

Minsky's process determined how these artificial neural networks could be arranged to have similar qualities to the human brain. However, he could only produce partial results and needed to further the research into this idea.

McCarthy and Shannon's idea behind this theory was to develop a way to use complex problems to determine and measure the machine's efficiency through mathematical theory and computations.[69] However, they were only to receive partial test results.

The idea behind self-improvement is how a machine would use self-modifying code to make itself smarter. This would allow for a machine to grow in intelligence and increase calculation speeds.[70] The group believed they could study this if a machine could improve upon the process of completing a task in the abstractions part of their research.

The group thought that research in this category could be broken down into smaller groups. This would consist of sensory and other forms of information about artificial intelligence. Abstractions in computer science can refer to mathematics and programming language.[71]

Their idea of computational creativity is how the program or a machine can be seen in having similar ways of human thinking.[72] They wanted to see if a machine could take a piece of incomplete information and improve upon it to fill in the missing details as the human mind can do. If this machine could do this; they needed to think of how did the machine determine the outcome.

See also
Computer museum
List of computer term etymologies, the origins of computer science words
List of pioneers in computer science
History of computing
History of computing hardware
History of software
History of personal computers
Timeline of algorithms
Timeline of women in computing
Timeline of computing 2020–present
References
 Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Chapman Hall.
 "History of Computer Science". uwaterloo.ca.
 Boyer, Carl B.; Merzbach, Uta C. (1991). A History of Mathematics (2nd ed.). John Wiley & Sons, Inc. pp. 252–253. ISBN 978-0-471-54397-8.
 Ifrah, Georges (2001). The Universal History of Computing: From the Abacus to the Quantum Computer. John Wiley & Sons. ISBN 978-0-471-39671-0.
 Bellos, Alex (2012-10-25). "Abacus adds up to number joy in Japan". The Guardian. London. Retrieved 2013-06-25.
 Sinha, A. C. (1978). "On the status of recursive rules in transformational grammar". Lingua. 44 (2–3): 169–218. doi:10.1016/0024-3841(78)90076-1.
 "Project Overview". The Antikythera Mechanism Research Project. Archived from the original on 2022-05-21. Retrieved 2023-07-06.
 "Islam, Knowledge, and Science". Islamic Web. Retrieved 2017-11-05.
 Lorch, R. P. (1976), "The Astronomical Instruments of Jabir ibn Aflah and the Torquetum", Centaurus, 20 (1): 11–34, Bibcode:1976Cent...20...11L, doi:10.1111/j.1600-0498.1976.tb00214.x
 Simon Singh, The Code Book, pp. 14–20
 "Al-Kindi, Cryptography, Codebreaking and Ciphers". 9 June 2003. Retrieved 2023-08-25.
 Koetsier, Teun (2001), "On the prehistory of programmable machines: musical automata, looms, calculators", Mechanism and Machine Theory, 36 (5): 589–603, doi:10.1016/S0094-114X(01)00005-2..
 Marchant, Jo (November 2006). "In search of lost time". Nature. 444 (7119): 534–538. Bibcode:2006Natur.444..534M. doi:10.1038/444534a. PMID 17136067.
 "John Napier and the Invention of Logarithms, 1614. E. W. Hobson". Isis. 3 (2): 285–286. 1920-10-01. doi:10.1086/357925. ISSN 0021-1753.
 "1.6 Shickard's Calculating Clock | Bit by Bit". Retrieved 2021-03-17.
 "History of Computing Science: The First Mechanical Calculator". eingang.org.
 Kidwell, Peggy Aldritch; Williams, Michael R. (1992). The Calculating Machines: Their history and development. MIT Press., p.38-42, translated and edited from Martin, Ernst (1925). Die Rechenmaschinen und ihre Entwicklungsgeschichte. Germany: Pappenheim.
 "CS History". everythingcomputerscience.com. Retrieved 2020-05-01.
 "2021: 375th birthday of Leibniz, father of computer science". people.idsia.ch.
 Lande, Daniel. "Development of the Binary Number System and the Foundations of Computer Science". The Mathematics Enthusiast: 513–540.
 Wiener, N., Cybernetics (2nd edition with revisions and two additional chapters), The MIT Press and Wiley, New York, 1961, p. 12.
 Wiener, Norbert (1948). "Time, Communication, and the Nervous System". Annals of the New York Academy of Sciences. 50 (4 Teleological): 197–220. Bibcode:1948NYASA..50..197W. doi:10.1111/j.1749-6632.1948.tb39853.x. PMID 18886381. S2CID 28452205. Archived from the original on 23 July 2021. Retrieved 23 July 2021.
 Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. CRC Press.
 "Charles Babbage". Encyclopædia Britannica Online Academic Edition. Encyclopædia Britannica In. 3 July 2023. Retrieved 2023-07-06.
 Evans 2018, p. 16.
 Evans 2018, p. 21.
 Evans 2018, p. 20.
 Isaacson, Betsy (2012-12-10). "Ada Lovelace, World's First Computer Programmer, Celebrated With Google Doodle". The Huffington Post. Retrieved 2013-02-20.
 "The John Gabriel Byrne Computer Science Collection" (PDF). Archived from the original on 2019-04-16. Retrieved 2019-08-08.
 "1907: was the first portable computer design Irish?". Ingenious Ireland. 17 October 2012.
 L. Torres Quevedo (1914). "Ensayos sobre Automática – Su definicion. Extension teórica de sus aplicaciones". Revista de la Academia de Ciencias Exacta, Revista 12: 391–418.
 Torres Quevedo, Leonardo (19 November 1914). "Automática: Complemento de la Teoría de las Máquinas" (PDF). Revista de Obras Públicas. LXII (2043): 575–583.
 Kneusel, Ronald T. (2017). Numbers and Computers. Springer. pp. 84–85. ISBN 978-3319505084.
 Randell, B. (1982). "Electromechanical Calculating Machine". The Origins of Digital Computers. Springer. pp. 109–120. ISBN 9783540113195.
 Randell, Brian. "From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush" (PDF). Archived from the original (PDF) on 21 September 2013. Retrieved 9 September 2013.
 Peirce, C. S., "Letter, Peirce to A. Marquand", dated 1886, Writings of Charles S. Peirce, v. 5, 1993, pp. 421–23. See Burks, Arthur W., "Review: Charles S. Peirce, The new elements of mathematics", Bulletin of the American Mathematical Society v. 84, n. 5 (1978), pp. 913–18, see 917. PDF Eprint.
 Peirce, C. S. (manuscript winter of 1880–81), "A Boolian Algebra with One Constant", published 1933 in Collected Papers v. 4, paragraphs 12–20. Reprinted 1989 in Writings of Charles S. Peirce v. 4, pp. 218–21, Google [1]. See Roberts, Don D. (2009), The Existential Graphs of Charles S. Peirce, p. 131.
 Hans Kleine Büning; Theodor Lettmann (1999). Propositional logic: deduction and algorithms. Cambridge University Press. p. 2. ISBN 978-0-521-63017-7.
 John Bird (2007). Engineering mathematics. Newnes. p. 532. ISBN 978-0-7506-8555-9.
 Yamada, Akihiko (2004). "History of Research on Switching Theory in Japan". IEEJ Transactions on Fundamentals and Materials. 124 (8). Institute of Electrical Engineers of Japan: 720–726. Bibcode:2004IJTFM.124..720Y. doi:10.1541/ieejfms.124.720.
 "Switching Theory/Relay Circuit Network Theory/Theory of Logical Mathematics". IPSJ Computer Museum. Information Processing Society of Japan.
 Radomir S. Stanković (University of Niš), Jaakko T. Astola (Tampere University of Technology), Mark G. Karpovsky (Boston University), Some Historical Remarks on Switching Theory, 2007, DOI 10.1.1.66.1248
 Stanković, Radomir S. [in German]; Astola, Jaakko Tapio [in Finnish], eds. (2008). Reprints from the Early Days of Information Sciences: TICSP Series On the Contributions of Akira Nakashima to Switching Theory (PDF). Tampere International Center for Signal Processing (TICSP) Series. Vol. 40. Tampere University of Technology, Tampere, Finland. ISBN 978-952-15-1980-2. ISSN 1456-2774. Archived from the original (PDF) on 2021-03-08. (3+207+1 pages) 10:00 min
 Shannon, Claude (2021-02-02), "A Symbolic Analysis of Relay and Switching Circuits (1938)", Ideas That Created the Future, The MIT Press, pp. 71–78, doi:10.7551/mitpress/12274.003.0010, hdl:1721.1/11173, ISBN 978-0-262-36317-4, S2CID 242857376, retrieved 2021-03-17
 Light, Jennifer S. (1999-07-01). "When Computers Were Women". Technology and Culture. 40 (3): 455–483. doi:10.1353/tech.1999.0128. ISSN 1097-3729. S2CID 108407884.
 Kiesler, Sara; Sproull, Lee; Eccles, Jacquelynne S. (1985-12-01). "Pool Halls, Chips, and War Games: Women in the Culture of Computing". Psychology of Women Quarterly. 9 (4): 451–462. doi:10.1111/j.1471-6402.1985.tb00895.x. ISSN 1471-6402. S2CID 143445730.
 Fritz, W. B. (1996). "The women of ENIAC". IEEE Annals of the History of Computing. 18 (3): 13–28. doi:10.1109/85.511940.
 Gürer, Denise (2002-06-01). "Pioneering Women in Computer Science". SIGCSE Bull. 34 (2): 175–180. doi:10.1145/543812.543853. ISSN 0097-8418. S2CID 2577644.
 Grier 2013, p. 138.
 "Gödel and the limits of logic". plus.maths.org. 2006-06-01. Retrieved 2020-05-01.
 Copeland, B. Jack (2019). "The Church-Turing Thesis". In Zalta, Edward N. (ed.). Stanford Encyclopedia of Philosophy (Spring 2019 ed.). Metaphysics Research Lab, Stanford University. Retrieved 2020-05-01.
 "Turing's Automatic Computing Engine". The Modern History of Computing. Stanford Encyclopedia of Philosophy. Metaphysics Research Lab, Stanford University. 2017.
 Barker-Plummer, David (1995-09-14). "Turing Machines". Stanford Encyclopedia of Philosophy. Retrieved 2013-02-20.
 Booth, Kathleen HV, "Machine language for Automatic Relay Computer", Birkbeck College Computation Laboratory, University of London
 Bellis, Mary (15 May 2019) [First published 2006 at inventors.about.com/library/weekly/aa050298.htm]. "Biography of Konrad Zuse, Inventor and Programmer of Early Computers". thoughtco.com. Dotdash Meredith. Archived from the original on 13 December 2020. Retrieved 3 February 2021. Konrad Zuse earned the semiofficial title of 'inventor of the modern computer'[who?]
 "Who is the Father of the Computer?". ComputerHope.
 Rojas, R. (1998). "How to make Zuse's Z3 a universal computer". IEEE Annals of the History of Computing. 20 (3): 51–54. doi:10.1109/85.707574. S2CID 14606587.
 Rojas, Raúl. "How to Make Zuse's Z3 a Universal Computer". Archived from the original on 2014-07-14.
 Talk given by Horst Zuse to the Computer Conservation Society at the Science Museum (London) on 18 November 2010
 "BBC News – How Alan Turing's Pilot ACE changed computing". BBC News. May 15, 2010.
 "The First "Computer Bug"". CHIPS. 30 (1). United States Navy: 18. January–March 2012. Retrieved 2023-12-03.
 Shannon, Claude Elwood (1964). The mathematical theory of communication. Warren Weaver. Urbana: University of Illinois Press. ISBN 0-252-72548-4. OCLC 2654027.
 Xiong, Aiping; Proctor, Robert W. (2018). "Information Processing: The Language and Analytical Tools for Cognitive Psychology in the Information Age". Frontiers in Psychology. 9: 1270. doi:10.3389/fpsyg.2018.01270. ISSN 1664-1078. PMC 6092626. PMID 30135664.
 "Von Neumann Architecture - an overview | ScienceDirect Topics". www.sciencedirect.com. Retrieved 2021-03-17.
 Cragon, Harvey G. (2000). Computer Architecture and Implementation. Cambridge: Cambridge University Press. pp. 1–13. ISBN 978-0-521-65168-4.
 "Accumlator" Def. 3. Oxford Dictionaries. Archived from the original on May 18, 2013.
 Moor, James (2006-12-15). "The Dartmouth College Artificial Intelligence Conference: The Next Fifty Years". AI Magazine. 27 (4): 87. doi:10.1609/aimag.v27i4.1911. ISSN 2371-9621.
 Prudhomme, Gerard (December 2018). Introduction to Assembly Language Programming. Arcler Education Incorporated. ISBN 978-1-77361-470-0. OCLC 1089398724.
 McCarthy, John; Lifschitz, Vladimir (1991). Artificial intelligence and mathematical theory of computation : papers in honor of John McCarthy. Academic Press. ISBN 0-12-450010-2. OCLC 911282256.
 Haenlein, Michael; Kaplan, Andreas (2019). "A Brief History of Artificial Intelligence: On the Past, Present, and Future of Artificial Intelligence". California Management Review. 61 (4): 5–14. doi:10.1177/0008125619864925. ISSN 0008-1256. S2CID 199866730.
 Baeten, Jos C. M.; Ball, Tom; de Boer, Frank S., eds. (2012). Theoretical Computer Science: 7th IFIP TC 1/WG 2.2 International Conference, TCS 2012, Amsterdam, the Netherlands, September 26-28, 2012. Proceedings. Lecture Notes in Computer Science. Vol. 7604. Berlin, Heidelberg: Springer Berlin Heidelberg. doi:10.1007/978-3-642-33475-7. ISBN 978-3-642-33474-0. S2CID 36796448.
 "The Creativity Post | What is Computational Creativity?". The Creativity Post. Retrieved 2021-03-04.
Sources
Evans, Claire L. (2018). Broad Band: The Untold Story of the Women Who Made the Internet. New York: Portfolio/Penguin. ISBN 9780735211759.
Grier, David Alan (2013). When Computers Were Human. Princeton: Princeton University Press. ISBN 9781400849369 – via Project MUSE.
Further reading
Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Taylor and Francis / CRC Press. ISBN 978-1-4822-1769-8.
Kak, Subhash : Computing Science in Ancient India; Munshiram Manoharlal Publishers Pvt. Ltd (2001)
The Development of Computer Science: A Sociocultural Perspective Matti Tedre's Ph.D. Thesis, University of Joensuu (2006)
Ceruzzi, Paul E. (1998). A History of a Modern Computing. The MIT Press. ISBN 978-0-262-03255-1.
Copeland, B. Jack. "The Modern History of Computing". In Zalta, Edward N. (ed.). Stanford Encyclopedia of Philosophy.
External links

Wikimedia Commons has media related to History of computer science.
Computer History Museum
Computers: From the Past to the Present
The First "Computer Bug" at the Naval History and Heritage Command Photo Archives.
Bitsavers, an effort to capture, salvage, and archive historical computer software and manuals from minicomputers and mainframes of the 1950s, 1960s, 1970s, and 1980s
Oral history interviews
Categories: History of computer scienceHistory of science by disciplineHistory of computing
This page was last edited on 15 August 2024, at 21:30 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile viewWikimedia FoundationPowered by MediaWiki

Main menu

WikipediaThe Free Encyclopedia
Search Wikipedia
Search
Create account
Log in

Personal tools
Contents hide
(Top)
Overview
Church–Turing thesis
P versus NP problem
See also
References
Further reading
External links
Philosophy of computer science

Article
Talk
Read
Edit
View history

Tools
Appearance hide
Text

Small

Standard

Large
Width

Standard

Wide
Color (beta)

Automatic

Light

Dark
From Wikipedia, the free encyclopedia
The philosophy of computer science is concerned with the philosophical questions that arise within the study of computer science. There is still no common understanding of the content, aims, focus, or topics of the philosophy of computer science,[1] despite some attempts to develop a philosophy of computer science like the philosophy of physics or the philosophy of mathematics. Due to the abstract nature of computer programs and the technological ambitions of computer science, many of the conceptual questions of the philosophy of computer science are also comparable to the philosophy of science, philosophy of mathematics, and the philosophy of technology.[2]

Overview
Many of the central philosophical questions of computer science are centered on the logical, ethical, methodological, ontological and epistemological issues that concern it.[3] Some of these questions may include:

What is computation?
Does the Church–Turing thesis capture the mathematical notion of an effective method in logic and mathematics?[4][5]
What are the philosophical consequences of the P vs NP problem?
What is information?
Church–Turing thesis
The Church–Turing thesis and its variations are central to the theory of computation. Since, as an informal notion, the concept of effective calculability does not have a formal definition, the thesis, although it has near-universal acceptance, cannot be formally proven. The implications of this thesis is also of philosophical concern. Philosophers have interpreted the Church–Turing thesis as having implications for the philosophy of mind.[6][7]

P versus NP problem
The P versus NP problem is an unsolved problem in computer science and mathematics. It asks whether every problem whose solution can be verified in polynomial time (and so defined to belong to the class NP) can also be solved in polynomial time (and so defined to belong to the class P). Most computer scientists believe that P ≠ NP.[8][9] Apart from the reason that after decades of studying these problems no one has been able to find a polynomial-time algorithm for any of more than 3000 important known NP-complete problems, philosophical reasons that concern its implications may have motivated this belief.

For instance, according to Scott Aaronson, the American computer scientist then at MIT:

If P = NP, then the world would be a profoundly different place than we usually assume it to be. There would be no special value in "creative leaps", no fundamental gap between solving a problem and recognizing the solution once it's found. Everyone who could appreciate a symphony would be Mozart; everyone who could follow a step-by-step argument would be Gauss.[10]

See also
Computer-assisted proof: Philosophical objections
Philosophy of artificial intelligence
Philosophy of information
Philosophy of mathematics
Philosophy of science
Philosophy of technology
References
 Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Chapman Hall.
 Turner, Raymond; Angius, Nicola (2020), "The Philosophy of Computer Science", in Zalta, Edward N. (ed.), The Stanford Encyclopedia of Philosophy (Spring 2020 ed.), Metaphysics Research Lab, Stanford University, retrieved 2020-05-21
 Turner, Raymond (January 2008). "The Philosophy of Computer Science". Journal of Applied Logic. 6 (4): 459. doi:10.1016/j.jal.2008.09.006. hdl:2434/807648 – via ResearchGate.
 Copeland, B. Jack. "The Church-Turing Thesis". Stanford Encyclopedia of Philosophy.
 Hodges, Andrew. "Did Church and Turing have a thesis about machines?".
 Copeland, B. Jack (November 10, 2017). "The Church-Turing Thesis". In Zalta, Edward N. (ed.). Stanford Encyclopedia of Philosophy.
 For a good place to encounter original papers see Chalmers, David J., ed. (2002). Philosophy of Mind: Classical and Contemporary Readings. New York: Oxford University Press. ISBN 978-0-19-514581-6. OCLC 610918145.
 William I. Gasarch (June 2002). "The P=?NP poll" (PDF). SIGACT News. 33 (2): 34–47. CiteSeerX 10.1.1.172.1005. doi:10.1145/564585.564599. S2CID 36828694. Retrieved 26 September 2018.
 Rosenberger, Jack (May 2012). "P vs. NP poll results". Communications of the ACM. 55 (5): 10.
 "Shtetl-Optimized » Blog Archive » Reasons to believe". 4 September 2006. Retrieved 2021-09-16.
Further reading
Matti Tedre (2014). The Science of Computing: Shaping a Discipline. Chapman Hall.
Scott Aaronson. "Why Philosophers Should Care About Computational Complexity". In Computability: Gödel, Turing, Church, and beyond.
Timothy Colburn. Philosophy and Computer Science. Explorations in Philosophy. M.E. Sharpe, 1999. ISBN 1-56324-991-X.
A.K. Dewdney. New Turing Omnibus: 66 Excursions in Computer Science
Luciano Floridi (editor). The Blackwell Guide to the Philosophy of Computing and Information, 2004.
Luciano Floridi (editor). Philosophy of Computing and Information: 5 Questions. Automatic Press, 2008.
Luciano Floridi. Philosophy and Computing: An Introduction, Routledge, 1999.
Christian Jongeneel. The informatical worldview, an inquiry into the methodology of computer science.
Jan van Leeuwen. "Towards a philosophy of the information and computing sciences", NIAS Newsletter 42, 2009.
Moschovakis, Y. (2001). What is an algorithm? In Enquist, B. and Schmid, W., editors, Mathematics unlimited — 2001 and beyond, pages 919–936. Springer.
Alexander Ollongren, Jaap van den Herik. Filosofie van de informatica. London and New York: Routledge, 1999. ISBN 0-415-19749-X
Tedre, Matti (2014), The Science of Computing: Shaping a Discipline, CRC Press, ISBN 9781482217698 Taylor and Francis.
Ray Turner and Nicola Angius. "The Philosophy of Computer Science". Stanford Encyclopedia of Philosophy.
Matti Tedre (2011). Computing as a Science: A Survey of Competing Viewpoints. Minds & Machines 21, 3, 361–387.
Ray Turner. Computational Artefacts-Towards a Philosophy of Computer Science. Springer. [1]
External links
The International Association for Computing and Philosophy
Philosophy of Computing and Information at PhilPapers
Philosophy of Computation at Berkeley
Rapaport, William J. (2020-07-27). "Philosophy of Computer Science (draft version)" (PDF). Archived from the original (PDF) on 2021-10-26.
vte
Computer science
vte
Philosophy of science
Category: Philosophy of computer science
This page was last edited on 10 May 2024, at 05:46 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile viewWikimedia FoundationPowered by MediaWiki
ComputerScience.org
Computer Science Programs
Resources
By State
Choose A Career
Bootcamps
Search Programs
What Are the Latest Trends in Computer Science and Technology?
portrait of Holland Webb
by Holland Webb
Updated August 9, 2024

check mark Edited by Mitch Jacobson
check mark Reviewed by Monali Mirel Chuatico undefinedClose
Our Integrity Network
ComputerScience.org is committed to delivering content that is objective and actionable. To that end, we have built a network of industry professionals across higher education to review our content and ensure we are providing the most helpful information to our readers.

Drawing on their firsthand industry expertise, our Integrity Network members serve as an additional step in our editing process, helping us confirm our content is accurate and up to date. These contributors:

Suggest changes to inaccurate or misleading information.
Provide specific, corrective feedback.
Identify critical information that writers may have missed.
Integrity Network members typically work full time in their industry profession and review content for ComputerScience.org as a side project. All Integrity Network members are paid members of the Red Ventures Education Integrity Network.

Explore our full list of Integrity Network members.

Top Computer Science Trends Tech Trends on the Horizon FAQ
Computer science is reimagining the limits of our daily lives. Explore the latest trends in AI, quantum computing, bioinformatics, and other subfields of this fast-changing industry.

Credit: Westend61 / Getty Images
Learn More About Our Partners

Are you ready to discover your college program?

I want my
Bachelor's
Focusing on
Computer Science
Search Programs
Computer science is among the most future-proof career fields — it's always changing and becomes more enmeshed in our lives every day. The latest computer technology can learn to adjust its actions to suit its environment, help carry out a complex surgery, map an organism's genome, or drive a car.

A complex web of industry needs, national security interests, healthcare opportunities, supply chain fragility, and user demand drive these trends. Technology developers and engineers are building the tools that may solve the climate crisis, make exceptional healthcare accessible to rural residents, or optimize the global supply chain.

If you plan to serve in computer science, you need to stay abreast of the trends — or risk falling behind.

Top Computer Science Trends
Jump to a Computer Science Trend:
Generative AI | Quantum Computing | Bioinformatics | Remote Healthcare | Cybersecurity | Autonomic, Autonomous, and Hybrid Systems | Regenerative AgriTech

Generative AI
Generative artificial intelligence (AI) is a type of artificial intelligence that can create new content, such as articles, images, and videos. Anyone who has used ChatGPT or Microsoft Copilot has toyed with generative AI. These AI models can summarize and classify information or answer questions because they have been trained to recognize patterns in data.

The research firm McKinsey & Company predicts that in the coming years, generative AI could contribute $4.4 trillion to the economy annually. Despite its obvious business advantages, many AI tools create content that sounds convincing and authoritative but is riddled with inaccuracies. Using this content can put companies at risk of regulatory penalties or consumer pushback.

Still, machine learning engineers, data scientists, and chatbot developers strive to make AI better and more accessible.

Job Outlook: The U.S. Bureau of Labor Statistics (BLS) projects that computer and information research scientist jobs, a broad career category that includes AI researchers, will grow 23% from 2022 to 2032. These workers earned a median wage of $145,080 in 2023. According to Payscale, as of April 2024, machine learning engineers make an average annual salary of $118,350.

Potential Careers:

Computer Researcher
Machine Learning Engineer
Senior Data Scientist
Robotics Engineer
Algorithm Engineer
Education Required: Entry-level artificial intelligence jobs may require a bachelor's degree, but engineers, researchers, and data scientists often need a master's degree or a doctorate.

Quantum Computing
Quantum computing operates on subatomic particles rather than a stream of binary impulses, and its bits, called qubits, can exist in more than one state simultaneously. It is much more powerful, but far less well-developed, than traditional computing. Should quantum computing become widely accessible, it would challenge current communication and cryptography practices.

Only a few quantum computing devices exist, and these are highly specialized. Although the concept of quantum computing has generated a lot of buzz, some experts wonder if the concept is truly viable, and whether the benefits outweigh the costs.

Nevertheless, organizations like the Central Intelligence Agency and tech companies like IBM are hiring quantum computing specialists. Many of these jobs call for a master's degree in a technical field like physics, mathematics, or electrical engineering.

Job Outlook:ZipRecruiter reports quantum computing professionals earn an average annual salary of $131,240 as of March 2024. Since quantum computing is still a relatively niche field, reliable job growth data is unavailable.

Potential Careers:

Quantum Machine Learning Scientist
Quantum Software Developer
Quantum Algorithm Researcher
Quantum Control Researcher
Qubit Researcher
Education Required: Quantum computing careers usually require a graduate degree.

Bioinformatics
Bioinformatics combines biology with computer science and generally focuses on data collection and analysis. Biologists use bioinformatics to spot patterns in their data. For example, a scientist can use bioinformatics tools and techniques to help sequence organisms' genomes.

As knowledge of biology expands, so does interest in bioinformatics. For example, research from BDO, a professional services firm, indicates spending on research and development in biotech grew nearly 22% from 2018 to 2019. Bioinformatics companies include Helix, Seven Bridges, and Thermo Fisher Scientific.

Bioinformatics specialists should have skills in cluster analysis, algorithm development, server cluster management, and protein sequencing analysis. Careers in this industry include biostatistician, bioinformatician, and bioinformatics scientist.

Job Outlook: The BLS projects that bioengineer and biomedical engineer jobs will grow 5% from 2022 to 2032. These workers earned a median wage of $100,730 in 2023.

Potential Careers:

Bioinformatics Research Scientist
Bioinformatics Engineer
Biomedical Researcher
Biostatistician
Computational Biologist
Education Required: Most bioinformatics careers require a bachelor's degree or higher. Leadership, research, and teaching positions may require a master's degree or Ph.D.

Remote Healthcare
Remote healthcare lets medical providers use technology to monitor the health of patients who cannot travel to providers' offices. Supporters of this field say remote healthcare improves patient outcomes while reducing costs.

EMARKETER produced a 2021 report that projects 70.6 million people will use remote patient monitoring devices by 2025, up from 29.1 million in 2020. The rising prevalence of chronic conditions, an aging patient population, and the need for cost-effective medical services are all helping drive this trend.

Physicians, therapists, and advanced practice professionals can use remote patient monitoring, but affordability, patient behaviors, and lack of awareness threaten widespread adoption. Companies in this field include GYANT, Medopad, and Cardiomo.

Job Outlook: The BLS projects that the healthcare field will have 1.8 million annual openings from 2022 to 2032. Healthcare practitioners and technical workers earned a median wage of $80,820 in 2023.

Potential Careers:

Doctor
Physician Assistant
Nurse Practitioner
Registered Nurse
Healthcare Business Analyst
Health Tech Software Engineer
Licensed Professional Counselor
Education Required: Doctors need an MD or DO, advanced practice professionals and counselors must hold a master's degree, and registered nurses need at least an associate degree. All medical providers must also hold licensure.

Cybersecurity
Cybersecurity is an umbrella term that refers to protecting digital assets from cyberthreats. Most attacks are coordinated efforts to access or change information, extort money, or disrupt business.

In 2022, McKinsey & Associates projected the cost of cybersecurity attacks would grow to $10.5 trillion annually by 2025, increasing 300% from 2015. Sophisticated artificial intelligence tools drive an increase in deep fakes, hacking, and data breaches. Companies such as Cisco, IBM, and Palo Alto Networks are building novel cybersecurity technologies to combat these threats.

Jobs in the field include security engineer, cryptographer, and ethical hacker. These positions often pay lucrative salaries and require academic degrees and professional credentials, such as the CompTIA security+ certification. Cybersecurity is not generally an entry-level field, so most new practitioners have computer science experience.

Job Outlook: The BLS projects that information security analyst jobs will grow 32% from 2022 to 2032. These workers earned a median wage of $120,360 in 2023.

Potential Careers:

Information Security Analyst
Digital Forensic Examiner
IT Auditor
Penetration Tester
Security Engineer
Education Required: Cybersecurity experts usually need a bachelor's degree and relevant professional certifications.

Autonomic, Autonomous, and Hybrid Systems
Autonomous may sound synonymous with autonomic, but the two words actually have different meanings. Autonomous machines operate with little or no human control — think of industrial robots or self-driving cars. Autonomic computing, in contrast, controls itself while also responding to its environment — think of the industrial Internet of Things and predictive AI.

This field has generated tremendous interest for its capacity to alter healthcare provision, transportation, supply chains, and anything that depends on smart technology. Companies like Tesla, Fetch Robotics, and Knightscope work in autonomic, autonomous, and hybrid systems, building everything from self-piloting security robots to intelligent machines that assist warehouse workers.

Autonomic, autonomous, and hybrid systems may lead to tremendous creative freedom for human beings. However, these subfields also present numerous ethical and moral questions, such as who is responsible for intelligent machines' bad decisions?

Job Outlook: The BLS projects that aerospace engineer jobs will grow 6% and mechanical engineer jobs will grow 10% from 2022 to 2032. In 2023, these professionals earned median wages of $130,720 and $99,510, respectively. According to Payscale data from April 2024, machine learning engineers make an average annual salary of $118,350.

Potential Careers:

Chief Engineer - Autonomous Systems Development
Autonomous Control Systems Design Engineer
Autonomy Engineer
Machine Learning Accelerator Architect
Silicon Emulation Engineer
Education Required: Engineers who build autonomous systems usually need a bachelor's degree and state licensure. Professionals who work in universities may need a Ph.D.

Regenerative Agritech
Regenerative agriculture takes a holistic approach to farming that aims to foster biodiversity, rebuild soil, and promote food security. Under this method, farmers seek to limit their greenhouse gas emissions, reduce synthetic fertilizers, and improve water usage.

These goals require technological tools that companies such as Trace Genomics, Future Fields, and ProducePay create. For example, Future Fields built a device to harness fruit flies and produce recombinant proteins sustainably.

While regenerative agriculture may become a powerful tool to help decarbonize the food system, reduce climate change, and improve crop resilience, it needs to scale three times faster than its current growth rate to maximize its benefits, according to a 2023 report from the European Commission. The field will require greater technological innovations to fulfill its potential.

Job Outlook: The BLS projects that agricultural engineer jobs will grow 6% from 2022 to 2032. These workers made a median wage of $88,750 in 2023.

Potential Careers:

Agritech Research Associate
Bioeconomy Consultant
Agricultural Digital and Technology Leader
Agritech Program Designer
Agricultural Engineer
Education Required: Agricultural engineers usually need a bachelor's degree. Program designers and research associates may need a graduate degree.

More Tech Trends on the Horizon
Digital trendsetters are working in industry, academia, government, and professional organizations to advance machine capabilities, safety, and accessibility. Consequently, some niche industries create new opportunities with nascent technologies.

For example, digital twin models can let scientists perform research more thoroughly to make products and processes safer. Similarly, low-power AI accelerators may allow autonomous vehicles or AI robots to perform their typical work when a power grid or battery is unavailable.

Other long-standing trends continue to advance: Blockchain, edge computing, cloud computing, and the Internet of Things are growing in capacity or user acceptance.

Human-computer interaction is also scaling up: As devices become wearable or implantable and the line between the virtual and physical worlds gets blurrier, existential questions about humanity, reality, and ethics are taking on greater significance.

How Robotics Can Help Future Tech Students
How Robotics Can Help Future Tech Students
Learn More
Blockchain Technology and the Future of Sustainability
Blockchain Technology and the Future of Sustainability
Learn More
Best Programming Languages to Learn
Best Programming Languages to Learn
Learn More
Frequently Asked Questions About Trends in Computer Science
What's the next big thing in computer science?
Artificial intelligence is probably the most-discussed technology in the computer science universe right now. Future developments for AI include intersections with cryptography, virtual reality, and hyperdimensional vectors.

Do I need to go to school to learn computer science?
You do not have to learn computer science in a formal classroom, but attending school can help you acquire knowledge faster and launch your career more effectively. Consider a bootcamp, certificate, or micro-master's program if a full computer science degree isn't for you.

What new technologies in computer science should I learn?
New computer science technologies include innovations in artificial intelligence, data analytics, machine learning, virtual and augmented reality, UI/UX design, and quantum computing. You can also study fields like blockchain, edge computing, and the Internet of Things.

Which fields of computer science are in most demand?
The BLS projects that information security analyst, software developer, and computer and information research scientist jobs will each grow more than 20% between 2022 and 2032 — much faster than the national projected growth for all careers. In-demand computer science subfields include robotics, bioinformatics, machine learning, computer forensics, big data, and cloud computing.

Page last reviewed April 16, 2024.

Recommended Reading
Can You Get a Degree in Artificial Intelligence?
Can You Get a Degree in Artificial Intelligence?
May 20, 2024 | Amy Boyington

A growing number of American colleges and universities offer bachelor's, master's, or doctoral...

Do Coding Bootcamps Advance Women In Tech?
July 5, 2023 | Victoria Lurie

Representation of women in tech is inching forward, but this does not illustrate what it's really...

Am I Too Old to Learn Coding?
August 9, 2024 | Margi Williams

No matter your age, it's never too late to learn to code. Discover the best ways to start learning...

Take the next step toward your future.

Discover programs you’re interested in and take charge of your education.

Learn More About Our Partners
I want my
Bachelor's
Focusing on
Computer Science
Search Programs
Rankings
Certifications
Bachelor's Degree
Master's Degree
Doctorate Programs
See All
Degrees
Bachelor's in IT
Doctorate Programs in IT
Associate in Computer Programming
Associate in Software Engineering
See All
Careers
Computer Information Researcher
Data Science
Health Information Technician
Systems Analyst
See All
States
Texas
California
Virginia
Michigan
See All
Resources
Women in Computer Science
Coding Bootcamps
Jobs in Computer Science
Computer Programming Languages
See All
ComputerScience.org
© 2024 ComputerScience.org, a Red Ventures Company
About Us 
Sitemap 
Privacy Policy 
Advertising Disclosure 
Advertise 
Contact 
Methodology 
Do Not Sell or Share My Personal Information 
Terms of Service 
Consumer Health Data Privacy Policy